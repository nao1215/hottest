// Package main is the entry point for the application.
package main

import (
	"os"
	"testing"

	"github.com/google/go-cmp/cmp"
)

func Test_extractFailTestMessage(t *testing.T) {
	t.Parallel()

	type args struct {
		testResultMsgs []string
	}
	tests := []struct {
		name string
		args args
		want []string
	}{
		{
			name: "If testResultMsgs is empty, return empty slice",
			args: args{
				testResultMsgs: []string{},
			},
			want: []string{},
		},
		{
			name: "If testResultMsgs is not empty and no error, return empty slice",
			args: args{
				testResultMsgs: []string{
					"=== RUN   TestExecute_Export",
					"=== RUN   TestExecute_Export/success",
					"gup:INFO : Export /home/nao/.config/gup/gup.conf",
					"--- PASS: TestExecute_Export (0.03s)",
					"    --- PASS: TestExecute_Export/success (0.03s)",
					"=== RUN   TestExecute_Export_WithOutputOption",
					"=== RUN   TestExecute_Export_WithOutputOption/success",
					"--- PASS: TestExecute_Export_WithOutputOption (0.03s)",
					"    --- PASS: TestExecute_Export_WithOutputOption/success (0.03s)",
					"=== RUN   TestExecute_Import_WithInputOption",
					"--- PASS: TestExecute_Import_WithInputOption (3.07s)",
					"=== RUN   TestExecute_Import_WithBadInputFile",
					"=== RUN   TestExecute_Import_WithBadInputFile/specify_not_exist_file",
					"=== RUN   TestExecute_Import_WithBadInputFile/specify_empty_file",
					"--- PASS: TestExecute_Import_WithBadInputFile (0.01s)",
					"    --- PASS: TestExecute_Import_WithBadInputFile/specify_not_exist_file (0.00s)",
					"    --- PASS: TestExecute_Import_WithBadInputFile/specify_empty_file (0.01s)",
					"=== RUN   TestExecute_Update",
					"--- PASS: TestExecute_Update (3.61s)",
					"=== RUN   TestExecute_Update_DryRunAndNotify",
					"--- PASS: TestExecute_Update_DryRunAndNotify (18.98s)",
					"=== RUN   TestExecute_Completion",
					"=== RUN   TestExecute_Completion/generate_completion_file",
					"--- PASS: TestExecute_Completion (0.01s)",
					"    --- PASS: TestExecute_Completion/generate_completion_file (0.01s)",
					"=== RUN   Test_gup",
					"=== RUN   Test_gup/parser_--dry-run_argument_error",
					"=== RUN   Test_gup/parser_--notify_argument_error",
					"=== RUN   Test_gup/parser_--jobs_argument_error",
					"--- PASS: Test_gup (0.00s)",
					"    --- PASS: Test_gup/parser_--dry-run_argument_error (0.00s)",
					"    --- PASS: Test_gup/parser_--notify_argument_error (0.00s)",
					"    --- PASS: Test_gup/parser_--jobs_argument_error (0.00s)",
					"=== RUN   Test_extractUserSpecifyPkg",
					"=== RUN   Test_extractUserSpecifyPkg/find_user_specify_package",
					"=== RUN   Test_extractUserSpecifyPkg/can_notfind_user_specify_package",
					"gup:WARN : not found 'test4' package in $GOPATH/bin or $GOBIN",
					"--- PASS: Test_extractUserSpecifyPkg (0.00s)",
					"    --- PASS: Test_extractUserSpecifyPkg/find_user_specify_package (0.00s)",
					"    --- PASS: Test_extractUserSpecifyPkg/can_notfind_user_specify_package (0.00s)",
					"=== RUN   Test_excludeUserSpecifiedPkg",
					"=== RUN   Test_excludeUserSpecifiedPkg/find_user_specify_package",
					"gup:INFO : Exclude 'pkg1' from the update target",
					"gup:INFO : Exclude 'pkg3' from the update target",
					"=== RUN   Test_excludeUserSpecifiedPkg/find_user_specify_package_(exclude_all_package)",
					"gup:INFO : Exclude 'pkg1' from the update target",
					"gup:INFO : Exclude 'pkg2' from the update target",
					"gup:INFO : Exclude 'pkg3' from the update target",
					"=== RUN   Test_excludeUserSpecifiedPkg/If_the_excluded_package_does_not_exist",
					"--- PASS: Test_excludeUserSpecifiedPkg (0.00s)",
					"    --- PASS: Test_excludeUserSpecifiedPkg/find_user_specify_package (0.00s)",
					"    --- PASS: Test_excludeUserSpecifiedPkg/find_user_specify_package_(exclude_all_package) (0.00s)",
					"    --- PASS: Test_excludeUserSpecifiedPkg/If_the_excluded_package_does_not_exist (0.00s)",
					"=== RUN   Test_update_not_use_go_cmd",
					"=== RUN   Test_update_not_use_go_cmd/Not_found_go_command",
					"--- PASS: Test_update_not_use_go_cmd (0.00s)",
					"    --- PASS: Test_update_not_use_go_cmd/Not_found_go_command (0.00s)",
					"=== RUN   Test_desktopNotifyIfNeeded",
					"=== RUN   Test_desktopNotifyIfNeeded/Notify_update_success",
					"=== RUN   Test_desktopNotifyIfNeeded/Notify_update_fail",
					"--- PASS: Test_desktopNotifyIfNeeded (0.01s)",
					"    --- PASS: Test_desktopNotifyIfNeeded/Notify_update_success (0.01s)",
					"    --- PASS: Test_desktopNotifyIfNeeded/Notify_update_fail (0.00s)",
					"=== RUN   TestExtractUserSpecifyPkg",
					"--- PASS: TestExtractUserSpecifyPkg (0.00s)",
					"=== CONT  TestBugReport",
					"=== CONT  TestGenerateManpages",
					"=== RUN   TestBugReport/Check_bug-report_--help",
					"=== RUN   TestGenerateManpages/Generate_man_pages",
					"--- PASS: TestBugReport (0.00s)",
					"    --- PASS: TestBugReport/Check_bug-report_--help (0.00s)",
					"gup:INFO : Generate /tmp/test3383475170/gup-bug-report.1.gz",
					"gup:INFO : Generate /tmp/test3383475170/gup-check.1.gz",
					"gup:INFO : Generate /tmp/test3383475170/gup-completion.1.gz",
					"gup:INFO : Generate /tmp/test3383475170/gup-export.1.gz",
					"gup:INFO : Generate /tmp/test3383475170/gup-import.1.gz",
					"gup:INFO : Generate /tmp/test3383475170/gup-list.1.gz",
					"gup:INFO : Generate /tmp/test3383475170/gup-man.1.gz",
					"gup:INFO : Generate /tmp/test3383475170/gup-remove.1.gz",
					"gup:INFO : Generate /tmp/test3383475170/gup-update.1.gz",
					"gup:INFO : Generate /tmp/test3383475170/gup-version.1.gz",
					"gup:INFO : Generate /tmp/test3383475170/gup.1.gz",
					"--- PASS: TestGenerateManpages (0.02s)",
					"    --- PASS: TestGenerateManpages/Generate_man_pages (0.02s)",
					"PASS",
					"ok      github.com/nao1215/gup/cmd      28.913s",
					"=== RUN   TestBinaryPathList_non_existing_path",
					"--- PASS: TestBinaryPathList_non_existing_path (0.00s)",
					"=== RUN   TestBinaryPathList_exclusion",
					"--- PASS: TestBinaryPathList_exclusion (0.01s)",
					"=== RUN   Test_extractImportPath_no_import_paths_to_extract",
					"--- PASS: Test_extractImportPath_no_import_paths_to_extract (0.00s)",
					"=== RUN   Test_extractModulePath_no_module_paths_to_extract",
					"--- PASS: Test_extractModulePath_no_module_paths_to_extract (0.00s)",
					"=== RUN   TestGetLatestVer_unknown_module",
					"--- PASS: TestGetLatestVer_unknown_module (0.00s)",
					"=== RUN   TestGetPackageInformation_unknown_module",
					"--- PASS: TestGetPackageInformation_unknown_module (0.00s)",
					"=== RUN   TestGetPackageVersion_golden",
					"--- PASS: TestGetPackageVersion_golden (0.00s)",
					"=== RUN   TestGetPackageVersion_getting_error_from_gobin",
					"--- PASS: TestGetPackageVersion_getting_error_from_gobin (0.00s)",
					"=== RUN   TestGetPackageVersion_package_has_no_version_info",
					"--- PASS: TestGetPackageVersion_package_has_no_version_info (0.00s)",
					"=== RUN   TestGoBin_gobin_and_gopath_is_empty",
					"--- PASS: TestGoBin_gobin_and_gopath_is_empty (0.00s)",
					"=== RUN   TestGoBin_golden",
					"--- PASS: TestGoBin_golden (0.00s)",
					"=== RUN   Test_goPath_get_from_build_default_gopath",
					"--- PASS: Test_goPath_get_from_build_default_gopath (0.00s)",
					"=== RUN   TestInstall_arg_is_command_line_arguments",
					"--- PASS: TestInstall_arg_is_command_line_arguments (0.00s)",
					"=== RUN   TestInstallLatest_golden",
					"--- PASS: TestInstallLatest_golden (0.00s)",
					"=== RUN   TestInstallMaster_golden",
					"--- PASS: TestInstallMaster_golden (0.00s)",
					"=== RUN   TestIsAlreadyUpToDate_golden",
					"--- PASS: TestIsAlreadyUpToDate_golden (0.00s)",
					"=== RUN   TestGoPaths_EndDryRunMode_fail_if_key_not_set",
					"=== RUN   TestGoPaths_EndDryRunMode_fail_if_key_not_set/case_GOBIN_and_GOPATH_are_empty",
					"=== RUN   TestGoPaths_EndDryRunMode_fail_if_key_not_set/case_GOBIN_is_not_empty",
					"=== RUN   TestGoPaths_EndDryRunMode_fail_if_key_not_set/case_GOPATH_is_not_empty",
					"--- PASS: TestGoPaths_EndDryRunMode_fail_if_key_not_set (0.00s)",
					"    --- PASS: TestGoPaths_EndDryRunMode_fail_if_key_not_set/case_GOBIN_and_GOPATH_are_empty (0.00s)",
					"    --- PASS: TestGoPaths_EndDryRunMode_fail_if_key_not_set/case_GOBIN_is_not_empty (0.00s)",
					"    --- PASS: TestGoPaths_EndDryRunMode_fail_if_key_not_set/case_GOPATH_is_not_empty (0.00s)",
					"=== RUN   TestGoPaths_EndDryRunMode_fail_to_remove_temp_dir",
					"--- PASS: TestGoPaths_EndDryRunMode_fail_to_remove_temp_dir (0.00s)",
					"=== RUN   TestGoPaths_StartDryRunMode_fail_to_get_temp_dir",
					"--- PASS: TestGoPaths_StartDryRunMode_fail_to_get_temp_dir (0.00s)",
					"=== RUN   TestGoPaths_StartDryRunMode_fail_if_key_not_set",
					"=== RUN   TestGoPaths_StartDryRunMode_fail_if_key_not_set/case_GOBIN_and_GOPATH_are_empty",
					"=== RUN   TestGoPaths_StartDryRunMode_fail_if_key_not_set/case_GOBIN_is_not_empty",
					"=== RUN   TestGoPaths_StartDryRunMode_fail_if_key_not_set/case_GOPATH_is_not_empty",
					"--- PASS: TestGoPaths_StartDryRunMode_fail_if_key_not_set (0.00s)",
					"    --- PASS: TestGoPaths_StartDryRunMode_fail_if_key_not_set/case_GOBIN_and_GOPATH_are_empty (0.00s)",
					"    --- PASS: TestGoPaths_StartDryRunMode_fail_if_key_not_set/case_GOBIN_is_not_empty (0.00s)",
					"    --- PASS: TestGoPaths_StartDryRunMode_fail_if_key_not_set/case_GOPATH_is_not_empty (0.00s)",
					"=== RUN   TestPackage_CurrentToLatestStr_not_up_to_date",
					"--- PASS: TestPackage_CurrentToLatestStr_not_up_to_date (0.00s)",
					"=== RUN   TestPackage_VersionCheckResultStr_not_up_to_date",
					"--- PASS: TestPackage_VersionCheckResultStr_not_up_to_date (0.00s)",
					"=== RUN   ExampleBinaryPathList",
					"--- PASS: ExampleBinaryPathList (0.00s)",
					"=== RUN   ExampleCanUseGoCmd",
					"--- PASS: ExampleCanUseGoCmd (0.00s)",
					"=== RUN   ExampleGetLatestVer",
					"--- PASS: ExampleGetLatestVer (2.11s)",
					"=== RUN   ExampleGetPackageInformation",
					"--- PASS: ExampleGetPackageInformation (0.02s)",
					"=== RUN   ExampleGetPackageVersion_unknown",
					"--- PASS: ExampleGetPackageVersion_unknown (0.01s)",
					"=== RUN   ExampleGoBin",
					"--- PASS: ExampleGoBin (0.00s)",
					"=== RUN   ExampleGoVersionWithOptionM",
					"--- PASS: ExampleGoVersionWithOptionM (0.01s)",
					"=== RUN   ExampleInstall",
					"--- PASS: ExampleInstall (2.89s)",
					"=== RUN   ExampleIsAlreadyUpToDate",
					"--- PASS: ExampleIsAlreadyUpToDate (0.00s)",
					"=== RUN   ExampleNewGoPaths",
					"--- PASS: ExampleNewGoPaths (0.00s)",
					"=== RUN   ExampleNewVersion",
					"--- PASS: ExampleNewVersion (0.00s)",
					"=== RUN   ExampleGoPaths_StartDryRunMode",
					"--- PASS: ExampleGoPaths_StartDryRunMode (0.00s)",
					"=== RUN   ExamplePackage_CurrentToLatestStr",
					"--- PASS: ExamplePackage_CurrentToLatestStr (0.02s)",
					"=== RUN   ExamplePackage_SetLatestVer",
					"--- PASS: ExamplePackage_SetLatestVer (0.01s)",
					"=== RUN   ExamplePackage_VersionCheckResultStr",
					"--- PASS: ExamplePackage_VersionCheckResultStr (0.01s)",
					"PASS",
					"ok      github.com/nao1215/gup/internal/goutil  5.102s",
					"=== RUN   TestInfo",
					"=== RUN   TestInfo/Print_message",
					"--- PASS: TestInfo (0.00s)",
					"    --- PASS: TestInfo/Print_message (0.00s)",
					"=== RUN   TestWarn",
					"=== RUN   TestWarn/Print_message",
					"--- PASS: TestWarn (0.00s)",
					"    --- PASS: TestWarn/Print_message (0.00s)",
					"=== RUN   TestErr",
					"=== RUN   TestErr/Print_message",
					"--- PASS: TestErr (0.00s)",
					"    --- PASS: TestErr/Print_message (0.00s)",
					"=== RUN   TestFatal",
					"=== RUN   TestFatal/Print_message",
					"--- PASS: TestFatal (0.00s)",
					"    --- PASS: TestFatal/Print_message (0.00s)",
					"=== RUN   TestQuestion",
					"=== RUN   TestQuestion/user_input_'y'",
					"gup:CHECK: no check [Y/n] === RUN   TestQuestion/user_input_'yes'",
					"gup:CHECK: no check [Y/n] === RUN   TestQuestion/user_input_'n'",
					"gup:CHECK: no check [Y/n] === RUN   TestQuestion/user_input_'no'",
					"gup:CHECK: no check [Y/n] === RUN   TestQuestion/user_input_'yes'_after_'a'",
					"gup:CHECK: no check [Y/n] gup:CHECK: no check [Y/n] === RUN   TestQuestion/user_only_input_enter",
					"gup:CHECK: no check [Y/n] gup:CHECK: no check [Y/n] --- PASS: TestQuestion (0.00s)",
					"    --- PASS: TestQuestion/user_input_'y' (0.00s)",
					"    --- PASS: TestQuestion/user_input_'yes' (0.00s)",
					"    --- PASS: TestQuestion/user_input_'n' (0.00s)",
					"    --- PASS: TestQuestion/user_input_'no' (0.00s)",
					"    --- PASS: TestQuestion/user_input_'yes'_after_'a' (0.00s)",
					"    --- PASS: TestQuestion/user_only_input_enter (0.00s)",
					"=== RUN   TestQuestion_FmtScanlnErr",
					"=== RUN   TestQuestion_FmtScanlnErr/fmt.Scanln()_return_error",
					"gup:CHECK: no check [Y/n] some error--- PASS: TestQuestion_FmtScanlnErr (0.00s)",
					"    --- PASS: TestQuestion_FmtScanlnErr/fmt.Scanln()_return_error (0.00s)",
					"PASS",
					"ok      github.com/nao1215/gup/internal/print   0.009s",
				},
			},
			want: []string{},
		},
		{
			name: "If testResultMsgs is not empty and has error, return error message",
			args: args{
				testResultMsgs: []string{
					"?       github.com/go-spectest/spectest/examples/websockets     [no test files]",
					"=== RUN   TestApiTestReport",
					"----------> inbound http request",
					"POST /hello HTTP/1.1",
					"Host: server",
					"Content-Type: application/json",
					"",
					"{\"a\": 12345}",
					"",
					"----------> request to mock",
					"GET / HTTP/1.1",
					"Host: localhost:8080",
					"User-Agent: Go-http-client/1.1",
					"Accept-Encoding: gzip",
					"",
					"",
					"<---------- response from mock",
					"HTTP/1.1 200 OK",
					"Content-Length: 1",
					"Content-Type: application/json",
					"",
					"1",
					"",
					"<---------- final response",
					"HTTP/1.1 200 OK",
					"Connection: close",
					"",
					"",
					"Duration: 100.693438ms",
					"=== RUN   TestApiTestMatchesTimes",
					"--- PASS: TestApiTestMatchesTimes (0.00s)",
					"=== RUN   TestHTTPMethodHEAD",
					"=== RUN   TestHTTPMethodHEAD/success_case:_test_Head()",
					"=== RUN   TestHTTPMethodHEAD/success_case:_test_Headf()",
					"--- PASS: TestHTTPMethodHEAD (0.00s)",
					"    --- PASS: TestHTTPMethodHEAD/success_case:_test_Head() (0.00s)",
					"    --- PASS: TestHTTPMethodHEAD/success_case:_test_Headf() (0.00s)",
					"=== RUN   TestHTTPMethodConnect",
					"=== RUN   TestHTTPMethodConnect/success_case:_test_Connect()",
					"=== RUN   TestHTTPMethodConnect/success_case:_test_Connectf()",
					"--- PASS: TestHTTPMethodConnect (0.00s)",
					"    --- PASS: TestHTTPMethodConnect/success_case:_test_Connect() (0.00s)",
					"    --- PASS: TestHTTPMethodConnect/success_case:_test_Connectf() (0.00s)",
					"=== RUN   TestHTTPMethodOptions",
					"=== RUN   TestHTTPMethodOptions/success_case:_test_Options()",
					"=== RUN   TestHTTPMethodOptions/success_case:_test_Optionsf()",
					"--- PASS: TestHTTPMethodOptions (0.00s)",
					"    --- PASS: TestHTTPMethodOptions/success_case:_test_Options() (0.00s)",
					"    --- PASS: TestHTTPMethodOptions/success_case:_test_Optionsf() (0.00s)",
					"=== RUN   TestHTTPMethodTrace",
					"=== RUN   TestHTTPMethodTrace/success__case:_test_Trace()",
					"--- PASS: TestHTTPMethodTrace (0.00s)",
					"    --- PASS: TestHTTPMethodTrace/success__case:_test_Trace() (0.00s)",
					"=== RUN   TestReportWithImage",
					"Created sequence diagram (sample.html): /tmp/spectest3321181633/sample.html",
					"--- PASS: TestReportWithImage (0.00s)",
					"=== RUN   TestMarkdownReportWithImage",
					"--- PASS: TestMarkdownReportWithImage (0.00s)",
					"=== RUN   TestMarkdownReportResponseJSON",
					"--- PASS: TestMarkdownReportResponseJSON (0.00s)",
					"=== RUN   TestGoldenFile",
					"=== RUN   TestGoldenFile/Because_there_is_no_golden_file_in_the_specified_path,_a_golden_file_is_automatically_created.",
					"    assert.go:114: ",
					"                Error Trace:    assert.go:267",
					"                                assert.go:98",
					"                                assert.go:88",
					"                                spectest.go:482",
					"                                response.go:234",
					"                                response.go:211",
					"                                response.go:177",
					"                                response.go:166",
					"                                spectest_test.go:1757",
					"                Error:          Not equal: ",
					"                                expected: 505",
					"                                actual  : 200",
					"                Test:           TestGoldenFile/Because_there_is_no_golden_file_in_the_specified_path,_a_golden_file_is_automatically_created.",
					"--- FAIL: TestGoldenFile (0.00s)",
					"    --- FAIL: TestGoldenFile/Because_there_is_no_golden_file_in_the_specified_path,_a_golden_file_is_automatically_created. (0.00s)",
					"=== RUN   TestIntervalDuration",
					"=== RUN   TestIntervalDuration/get_1[s]_duration",
					"=== RUN   TestIntervalDuration/get_1[ns]_duration",
					"--- PASS: TestIntervalDuration (0.00s)",
					"    --- PASS: TestIntervalDuration/get_1[s]_duration (0.00s)",
					"    --- PASS: TestIntervalDuration/get_1[ns]_duration (0.00s)",
					"=== RUN   ExampleInterval_Duration",
					"--- PASS: ExampleInterval_Duration (0.00s)",
					"FAIL",
					"FAIL    github.com/go-spectest/spectest 4.293s",
					"--- PASS: Test_main (0.03s)",
					"    --- PASS: Test_main/no_args (0.00s)",
					"    --- PASS: Test_main/version (0.00s)",
					"    --- PASS: Test_main/help (0.00s)",
					"    --- PASS: Test_main/help_version (0.00s)",
					"    --- PASS: Test_main/help_help (0.00s)",
					"    --- PASS: Test_main/help_unknown (0.00s)",
					"    --- PASS: Test_main/unknown (0.02s)",
					"PASS",
					"FAIL",
					"=== RUN   TestSelectorSelection/with_selection",
					"--- PASS: TestSelectorSelection (0.00s)",
					"    --- PASS: TestSelectorSelection/with_selection (0.00s)",
					"=== RUN   TestSelectorSelectionNotMatch",
					"=== RUN   TestSelectorSelectionNotMatch/with_selection",
					"--- PASS: TestSelectorSelectionNotMatch (0.00s)",
					"    --- PASS: TestSelectorSelectionNotMatch/with_selection (0.00s)",
					"=== RUN   TestSelectorMultipleExistsNoMatch",
					"--- PASS: TestSelectorMultipleExistsNoMatch (0.00s)",
					"PASS",
					"ok      github.com/go-spectest/spectest/css-selector    0.016s",
					"=== RUN   TestEqualFromFile",
					"=== PAUSE TestEqualFromFile",
					"=== RUN   TestEqualFromFileWithThreshold",
					"=== PAUSE TestEqualFromFileWithThreshold",
					"=== CONT  TestEqualFromFile",
					"=== RUN   TestEqualFromFile/should_return_nil_if_images_are_equal",
					"=== PAUSE TestEqualFromFile/should_return_nil_if_images_are_equal",
					"=== RUN   TestEqualFromFile/should_return_error_if_images_are_not_equal",
					"=== PAUSE TestEqualFromFile/should_return_error_if_images_are_not_equal",
					"=== CONT  TestEqualFromFile/should_return_nil_if_images_are_equal",
					"=== CONT  TestEqualFromFile/should_return_error_if_images_are_not_equal",
					"=== CONT  TestEqualFromFileWithThreshold",
					"=== RUN   TestEqualFromFileWithThreshold/should_return_nil_if_images_are_equal._Threshold_is_0.1",
					"=== PAUSE TestEqualFromFileWithThreshold/should_return_nil_if_images_are_equal._Threshold_is_0.1",
					"=== RUN   TestEqualFromFileWithThreshold/should_return_nil_if_images_are_equal._Threshold_is_0.9",
					"=== PAUSE TestEqualFromFileWithThreshold/should_return_nil_if_images_are_equal._Threshold_is_0.9",
					"=== RUN   TestEqualFromFileWithThreshold/should_return_error_if_images_are_not_equal",
					"=== PAUSE TestEqualFromFileWithThreshold/should_return_error_if_images_are_not_equal",
					"=== RUN   TestEqualFromFileWithThreshold/should_return_nil_if_images_are_not_equal,_threshold_is_0.9",
					"=== PAUSE TestEqualFromFileWithThreshold/should_return_nil_if_images_are_not_equal,_threshold_is_0.9",
					"=== CONT  TestEqualFromFileWithThreshold/should_return_nil_if_images_are_equal._Threshold_is_0.1",
					"=== CONT  TestEqualFromFileWithThreshold/should_return_error_if_images_are_not_equal",
					"=== CONT  TestEqualFromFileWithThreshold/should_return_nil_if_images_are_not_equal,_threshold_is_0.9",
					"=== CONT  TestEqualFromFileWithThreshold/should_return_nil_if_images_are_equal._Threshold_is_0.9",
					"--- PASS: TestEqualFromFileWithThreshold (0.00s)",
					"    --- PASS: TestEqualFromFileWithThreshold/should_return_nil_if_images_are_equal._Threshold_is_0.9 (0.09s)",
					"    --- PASS: TestEqualFromFileWithThreshold/should_return_nil_if_images_are_equal._Threshold_is_0.1 (0.09s)",
					"    --- PASS: TestEqualFromFileWithThreshold/should_return_error_if_images_are_not_equal (0.09s)",
					"    --- PASS: TestEqualFromFileWithThreshold/should_return_nil_if_images_are_not_equal,_threshold_is_0.9 (0.10s)",
					"--- PASS: TestEqualFromFile (0.00s)",
					"    --- PASS: TestEqualFromFile/should_return_nil_if_images_are_equal (0.10s)",
					"    --- PASS: TestEqualFromFile/should_return_error_if_images_are_not_equal (0.10s)",
					"PASS",
					"ok      github.com/go-spectest/spectest/image   0.112s",
					"=== RUN   TestApiTestContains",
					"--- PASS: TestApiTestContains (0.00s)",
					"=== RUN   TestApiTestEqualNumeric",
					"--- PASS: TestApiTestEqualNumeric (0.00s)",
					"=== RUN   TestApiTestEqualString",
					"--- PASS: TestApiTestEqualString (0.00s)",
					"=== RUN   TestApiTestEqualMap",
					"--- PASS: TestApiTestEqualMap (0.00s)",
					"=== RUN   TestApiTestNotEqualNumeric",
					"--- PASS: TestApiTestNotEqualNumeric (0.00s)",
					"=== RUN   TestApiTestNotEqualString",
					"--- PASS: TestApiTestNotEqualString (0.00s)",
					"=== RUN   TestApiTestNotEqualMap",
					"--- PASS: TestApiTestNotEqualMap (0.00s)",
					"=== RUN   TestApiTestLen",
					"--- PASS: TestApiTestLen (0.00s)",
					"=== RUN   TestApiTestGreaterThan",
					"--- PASS: TestApiTestGreaterThan (0.00s)",
					"=== RUN   TestApiTestLessThan",
					"--- PASS: TestApiTestLessThan (0.00s)",
					"=== RUN   TestApiTestPresent",
					"--- PASS: TestApiTestPresent (0.00s)",
					"=== RUN   TestApiTestMatches",
					"=== RUN   TestApiTestMatches/match_test_0",
					"=== RUN   TestApiTestMatches/match_test_1",
					"=== RUN   TestApiTestMatches/match_test_2",
					"=== RUN   TestApiTestMatches/match_test_3",
					"=== RUN   TestApiTestMatches/match_test_4",
					"--- PASS: TestApiTestMatches (0.00s)",
					"    --- PASS: TestApiTestMatches/match_test_0 (0.00s)",
					"    --- PASS: TestApiTestMatches/match_test_1 (0.00s)",
					"    --- PASS: TestApiTestMatches/match_test_2 (0.00s)",
					"    --- PASS: TestApiTestMatches/match_test_3 (0.00s)",
					"    --- PASS: TestApiTestMatches/match_test_4 (0.00s)",
					"=== RUN   TestApiTestChain",
					"--- PASS: TestApiTestChain (0.00s)",
					"=== RUN   TestApiTestMatchesFailCompile",
					"--- PASS: TestApiTestMatchesFailCompile (0.00s)",
					"=== RUN   TestApiTestMatchesFailForObject",
					"--- PASS: TestApiTestMatchesFailForObject (0.00s)",
					"=== RUN   TestApiTestMatchesFailForArray",
					"--- PASS: TestApiTestMatchesFailForArray (0.00s)",
					"=== RUN   TestApiTestMatchesFailForNilValue",
					"--- PASS: TestApiTestMatchesFailForNilValue (0.00s)",
					"=== RUN   TestApiTestJWT",
					"--- PASS: TestApiTestJWT (0.00s)",
					"PASS",
					"ok      github.com/go-spectest/spectest/jsonpath        0.027s",
					"=== RUN   TestMocks",
					"--- PASS: TestMocks (0.00s)",
					"PASS",
					"ok      github.com/go-spectest/spectest/jsonpath/mocks  0.006s",
					"=== RUN   TestValidateMatchesSchema",
					"--- PASS: TestValidateMatchesSchema (0.00s)",
					"=== RUN   TestValidateFailsToMatchSchema",
					"--- PASS: TestValidateFailsToMatchSchema (0.00s)",
					"PASS",
					"ok      github.com/go-spectest/spectest/jsonschema      0.007s",
					"=== RUN   TestWritesTheMeta",
					"--- PASS: TestWritesTheMeta (0.00s)",
					"=== RUN   TestNewFormatter",
					"--- PASS: TestNewFormatter (0.00s)",
					"PASS",
					"ok      github.com/go-spectest/spectest/plantuml        0.005s",
					"FAIL",
					"=== RUN   TestSelectorSelection/with_selection",
					"--- PASS: TestSelectorSelection (0.00s)",
					"    --- PASS: TestSelectorSelection/with_selection (0.00s)",
					"=== RUN   TestSelectorSelectionNotMatch",
					"=== RUN   TestSelectorSelectionNotMatch/with_selection",
					"--- PASS: TestSelectorSelectionNotMatch (0.00s)",
					"    --- PASS: TestSelectorSelectionNotMatch/with_selection (0.00s)",
					"=== RUN   TestSelectorMultipleExistsNoMatch",
					"--- PASS: TestSelectorMultipleExistsNoMatch (0.00s)",
					"PASS",
					"ok      github.com/go-spectest/spectest/css-selector    0.016s",
					"=== RUN   TestEqualFromFile",
					"=== PAUSE TestEqualFromFile",
					"=== RUN   TestEqualFromFileWithThreshold",
					"=== PAUSE TestEqualFromFileWithThreshold",
					"=== CONT  TestEqualFromFile",
					"=== RUN   TestEqualFromFile/should_return_nil_if_images_are_equal",
					"=== PAUSE TestEqualFromFile/should_return_nil_if_images_are_equal",
					"=== RUN   TestEqualFromFile/should_return_error_if_images_are_not_equal",
					"=== PAUSE TestEqualFromFile/should_return_error_if_images_are_not_equal",
					"=== CONT  TestEqualFromFile/should_return_nil_if_images_are_equal",
					"=== CONT  TestEqualFromFile/should_return_error_if_images_are_not_equal",
					"=== CONT  TestEqualFromFileWithThreshold",
					"=== RUN   TestEqualFromFileWithThreshold/should_return_nil_if_images_are_equal._Threshold_is_0.1",
					"=== PAUSE TestEqualFromFileWithThreshold/should_return_nil_if_images_are_equal._Threshold_is_0.1",
					"=== RUN   TestEqualFromFileWithThreshold/should_return_nil_if_images_are_equal._Threshold_is_0.9",
					"=== PAUSE TestEqualFromFileWithThreshold/should_return_nil_if_images_are_equal._Threshold_is_0.9",
					"=== RUN   TestEqualFromFileWithThreshold/should_return_error_if_images_are_not_equal",
					"=== PAUSE TestEqualFromFileWithThreshold/should_return_error_if_images_are_not_equal",
					"=== RUN   TestEqualFromFileWithThreshold/should_return_nil_if_images_are_not_equal,_threshold_is_0.9",
					"=== PAUSE TestEqualFromFileWithThreshold/should_return_nil_if_images_are_not_equal,_threshold_is_0.9",
					"=== CONT  TestEqualFromFileWithThreshold/should_return_nil_if_images_are_equal._Threshold_is_0.1",
					"=== CONT  TestEqualFromFileWithThreshold/should_return_error_if_images_are_not_equal",
					"=== CONT  TestEqualFromFileWithThreshold/should_return_nil_if_images_are_not_equal,_threshold_is_0.9",
					"=== CONT  TestEqualFromFileWithThreshold/should_return_nil_if_images_are_equal._Threshold_is_0.9",
					"--- PASS: TestEqualFromFileWithThreshold (0.00s)",
					"    --- PASS: TestEqualFromFileWithThreshold/should_return_nil_if_images_are_equal._Threshold_is_0.9 (0.09s)",
					"    --- PASS: TestEqualFromFileWithThreshold/should_return_nil_if_images_are_equal._Threshold_is_0.1 (0.09s)",
					"    --- PASS: TestEqualFromFileWithThreshold/should_return_error_if_images_are_not_equal (0.09s)",
					"    --- PASS: TestEqualFromFileWithThreshold/should_return_nil_if_images_are_not_equal,_threshold_is_0.9 (0.10s)",
					"--- PASS: TestEqualFromFile (0.00s)",
					"    --- PASS: TestEqualFromFile/should_return_nil_if_images_are_equal (0.10s)",
					"    --- PASS: TestEqualFromFile/should_return_error_if_images_are_not_equal (0.10s)",
					"PASS",
					"ok      github.com/go-spectest/spectest/image   0.112s",
					"=== RUN   TestApiTestContains",
					"--- PASS: TestApiTestContains (0.00s)",
					"=== RUN   TestApiTestEqualNumeric",
					"--- PASS: TestApiTestEqualNumeric (0.00s)",
					"=== RUN   TestApiTestEqualString",
					"--- PASS: TestApiTestEqualString (0.00s)",
					"=== RUN   TestApiTestEqualMap",
					"--- PASS: TestApiTestEqualMap (0.00s)",
					"=== RUN   TestApiTestNotEqualNumeric",
					"--- PASS: TestApiTestNotEqualNumeric (0.00s)",
					"=== RUN   TestApiTestNotEqualString",
					"--- PASS: TestApiTestNotEqualString (0.00s)",
					"=== RUN   TestApiTestNotEqualMap",
					"--- PASS: TestApiTestNotEqualMap (0.00s)",
					"=== RUN   TestApiTestLen",
					"--- PASS: TestApiTestLen (0.00s)",
					"=== RUN   TestApiTestGreaterThan",
					"--- PASS: TestApiTestGreaterThan (0.00s)",
					"=== RUN   TestApiTestLessThan",
					"--- PASS: TestApiTestLessThan (0.00s)",
					"=== RUN   TestApiTestPresent",
					"--- PASS: TestApiTestPresent (0.00s)",
					"=== RUN   TestApiTestMatches",
					"=== RUN   TestApiTestMatches/match_test_0",
					"=== RUN   TestApiTestMatches/match_test_1",
					"=== RUN   TestApiTestMatches/match_test_2",
					"=== RUN   TestApiTestMatches/match_test_3",
					"=== RUN   TestApiTestMatches/match_test_4",
					"--- PASS: TestApiTestMatches (0.00s)",
					"    --- PASS: TestApiTestMatches/match_test_0 (0.00s)",
					"    --- PASS: TestApiTestMatches/match_test_1 (0.00s)",
					"    --- PASS: TestApiTestMatches/match_test_2 (0.00s)",
					"    --- PASS: TestApiTestMatches/match_test_3 (0.00s)",
					"    --- PASS: TestApiTestMatches/match_test_4 (0.00s)",
					"=== RUN   TestApiTestChain",
					"--- PASS: TestApiTestChain (0.00s)",
					"=== RUN   TestApiTestMatchesFailCompile",
					"--- PASS: TestApiTestMatchesFailCompile (0.00s)",
					"=== RUN   TestApiTestMatchesFailForObject",
					"--- PASS: TestApiTestMatchesFailForObject (0.00s)",
					"=== RUN   TestApiTestMatchesFailForArray",
					"--- PASS: TestApiTestMatchesFailForArray (0.00s)",
					"=== RUN   TestApiTestMatchesFailForNilValue",
					"--- PASS: TestApiTestMatchesFailForNilValue (0.00s)",
					"=== RUN   TestApiTestJWT",
					"--- PASS: TestApiTestJWT (0.00s)",
					"PASS",
					"ok      github.com/go-spectest/spectest/jsonpath        0.027s",
					"=== RUN   TestMocks",
					"--- PASS: TestMocks (0.00s)",
					"PASS",
					"ok      github.com/go-spectest/spectest/jsonpath/mocks  0.006s",
					"=== RUN   TestValidateMatchesSchema",
					"--- PASS: TestValidateMatchesSchema (0.00s)",
					"=== RUN   TestValidateFailsToMatchSchema",
					"--- PASS: TestValidateFailsToMatchSchema (0.00s)",
					"PASS",
					"ok      github.com/go-spectest/spectest/jsonschema      0.007s",
					"=== RUN   TestWritesTheMeta",
					"--- PASS: TestWritesTheMeta (0.00s)",
					"=== RUN   TestNewFormatter",
					"--- PASS: TestNewFormatter (0.00s)",
					"PASS",
					"ok      github.com/go-spectest/spectest/plantuml        0.005s",
					"FAIL",
					"=== RUN   TestSelectorSelection/with_selection",
					"--- PASS: TestSelectorSelection (0.00s)",
					"    --- PASS: TestSelectorSelection/with_selection (0.00s)",
					"=== RUN   TestSelectorSelectionNotMatch",
					"=== RUN   TestSelectorSelectionNotMatch/with_selection",
					"--- PASS: TestSelectorSelectionNotMatch (0.00s)",
					"    --- PASS: TestSelectorSelectionNotMatch/with_selection (0.00s)",
					"=== RUN   TestSelectorMultipleExistsNoMatch",
					"--- PASS: TestSelectorMultipleExistsNoMatch (0.00s)",
					"PASS",
					"ok      github.com/go-spectest/spectest/css-selector    0.016s",
					"=== RUN   TestEqualFromFile",
					"=== PAUSE TestEqualFromFile",
					"=== RUN   TestEqualFromFileWithThreshold",
					"=== PAUSE TestEqualFromFileWithThreshold",
					"=== CONT  TestEqualFromFile",
					"=== RUN   TestEqualFromFile/should_return_nil_if_images_are_equal",
					"=== PAUSE TestEqualFromFile/should_return_nil_if_images_are_equal",
					"=== RUN   TestEqualFromFile/should_return_error_if_images_are_not_equal",
					"=== PAUSE TestEqualFromFile/should_return_error_if_images_are_not_equal",
					"=== CONT  TestEqualFromFile/should_return_nil_if_images_are_equal",
					"=== CONT  TestEqualFromFile/should_return_error_if_images_are_not_equal",
					"=== CONT  TestEqualFromFileWithThreshold",
					"=== RUN   TestEqualFromFileWithThreshold/should_return_nil_if_images_are_equal._Threshold_is_0.1",
					"=== PAUSE TestEqualFromFileWithThreshold/should_return_nil_if_images_are_equal._Threshold_is_0.1",
					"=== RUN   TestEqualFromFileWithThreshold/should_return_nil_if_images_are_equal._Threshold_is_0.9",
					"=== PAUSE TestEqualFromFileWithThreshold/should_return_nil_if_images_are_equal._Threshold_is_0.9",
					"=== RUN   TestEqualFromFileWithThreshold/should_return_error_if_images_are_not_equal",
					"=== PAUSE TestEqualFromFileWithThreshold/should_return_error_if_images_are_not_equal",
					"=== RUN   TestEqualFromFileWithThreshold/should_return_nil_if_images_are_not_equal,_threshold_is_0.9",
					"=== PAUSE TestEqualFromFileWithThreshold/should_return_nil_if_images_are_not_equal,_threshold_is_0.9",
					"=== CONT  TestEqualFromFileWithThreshold/should_return_nil_if_images_are_equal._Threshold_is_0.1",
					"=== CONT  TestEqualFromFileWithThreshold/should_return_error_if_images_are_not_equal",
					"=== CONT  TestEqualFromFileWithThreshold/should_return_nil_if_images_are_not_equal,_threshold_is_0.9",
					"=== CONT  TestEqualFromFileWithThreshold/should_return_nil_if_images_are_equal._Threshold_is_0.9",
					"--- PASS: TestEqualFromFileWithThreshold (0.00s)",
					"    --- PASS: TestEqualFromFileWithThreshold/should_return_nil_if_images_are_equal._Threshold_is_0.9 (0.09s)",
					"    --- PASS: TestEqualFromFileWithThreshold/should_return_nil_if_images_are_equal._Threshold_is_0.1 (0.09s)",
					"    --- PASS: TestEqualFromFileWithThreshold/should_return_error_if_images_are_not_equal (0.09s)",
					"    --- PASS: TestEqualFromFileWithThreshold/should_return_nil_if_images_are_not_equal,_threshold_is_0.9 (0.10s)",
					"--- PASS: TestEqualFromFile (0.00s)",
					"    --- PASS: TestEqualFromFile/should_return_nil_if_images_are_equal (0.10s)",
					"    --- PASS: TestEqualFromFile/should_return_error_if_images_are_not_equal (0.10s)",
					"PASS",
					"ok      github.com/go-spectest/spectest/image   0.112s",
					"=== RUN   TestApiTestContains",
					"--- PASS: TestApiTestContains (0.00s)",
					"=== RUN   TestApiTestEqualNumeric",
					"--- PASS: TestApiTestEqualNumeric (0.00s)",
					"=== RUN   TestApiTestEqualString",
					"--- PASS: TestApiTestEqualString (0.00s)",
					"=== RUN   TestApiTestEqualMap",
					"--- PASS: TestApiTestEqualMap (0.00s)",
					"=== RUN   TestApiTestNotEqualNumeric",
					"--- PASS: TestApiTestNotEqualNumeric (0.00s)",
					"=== RUN   TestApiTestNotEqualString",
					"--- PASS: TestApiTestNotEqualString (0.00s)",
					"=== RUN   TestApiTestNotEqualMap",
					"--- PASS: TestApiTestNotEqualMap (0.00s)",
					"=== RUN   TestApiTestLen",
					"--- PASS: TestApiTestLen (0.00s)",
					"=== RUN   TestApiTestGreaterThan",
					"--- PASS: TestApiTestGreaterThan (0.00s)",
					"=== RUN   TestApiTestLessThan",
					"--- PASS: TestApiTestLessThan (0.00s)",
					"=== RUN   TestApiTestPresent",
					"--- PASS: TestApiTestPresent (0.00s)",
					"=== RUN   TestApiTestMatches",
					"=== RUN   TestApiTestMatches/match_test_0",
					"=== RUN   TestApiTestMatches/match_test_1",
					"=== RUN   TestApiTestMatches/match_test_2",
					"=== RUN   TestApiTestMatches/match_test_3",
					"=== RUN   TestApiTestMatches/match_test_4",
					"--- PASS: TestApiTestMatches (0.00s)",
					"    --- PASS: TestApiTestMatches/match_test_0 (0.00s)",
					"    --- PASS: TestApiTestMatches/match_test_1 (0.00s)",
					"    --- PASS: TestApiTestMatches/match_test_2 (0.00s)",
					"    --- PASS: TestApiTestMatches/match_test_3 (0.00s)",
					"    --- PASS: TestApiTestMatches/match_test_4 (0.00s)",
					"=== RUN   TestApiTestChain",
					"--- PASS: TestApiTestChain (0.00s)",
					"=== RUN   TestApiTestMatchesFailCompile",
					"--- PASS: TestApiTestMatchesFailCompile (0.00s)",
					"=== RUN   TestApiTestMatchesFailForObject",
					"--- PASS: TestApiTestMatchesFailForObject (0.00s)",
					"=== RUN   TestApiTestMatchesFailForArray",
					"--- PASS: TestApiTestMatchesFailForArray (0.00s)",
					"=== RUN   TestApiTestMatchesFailForNilValue",
					"--- PASS: TestApiTestMatchesFailForNilValue (0.00s)",
					"=== RUN   TestApiTestJWT",
					"--- PASS: TestApiTestJWT (0.00s)",
					"PASS",
					"ok      github.com/go-spectest/spectest/jsonpath        0.027s",
					"=== RUN   TestMocks",
					"--- PASS: TestMocks (0.00s)",
					"PASS",
					"ok      github.com/go-spectest/spectest/jsonpath/mocks  0.006s",
					"=== RUN   TestValidateMatchesSchema",
					"--- PASS: TestValidateMatchesSchema (0.00s)",
					"=== RUN   TestValidateFailsToMatchSchema",
					"--- PASS: TestValidateFailsToMatchSchema (0.00s)",
					"PASS",
					"ok      github.com/go-spectest/spectest/jsonschema      0.007s",
					"=== RUN   TestWritesTheMeta",
					"--- PASS: TestWritesTheMeta (0.00s)",
					"=== RUN   TestNewFormatter",
					"--- PASS: TestNewFormatter (0.00s)",
					"PASS",
					"=== RUN   Test_goldenFile_write/should_write_data_to_the_golden_file",
					"    file_system_test.go:51: write() file does not exist",
					"=== RUN   Test_goldenFile_write/should_not_write_data_to_the_golden_file",
					"--- FAIL: Test_goldenFile_write (0.00s)",
					"    --- FAIL: Test_goldenFile_write/should_write_data_to_the_golden_file (0.00s)",
					"    --- PASS: Test_goldenFile_write/should_not_write_data_to_the_golden_file (0.00s)",
					"=== RUN   TestNewHTTPRequestLogEntry",
					"ok      github.com/go-spectest/spectest/plantuml        0.005s",
					"FAIL",
				},
			},
			want: []string{
				"--- FAIL: TestGoldenFile (0.00s)",
				"    --- FAIL: TestGoldenFile/Because_there_is_no_golden_file_in_the_specified_path,_a_golden_file_is_automatically_created. (0.00s)",
				"        assert.go:114: ",
				"                    Error Trace:    assert.go:267",
				"                                    assert.go:98",
				"                                    assert.go:88",
				"                                    spectest.go:482",
				"                                    response.go:234",
				"                                    response.go:211",
				"                                    response.go:177",
				"                                    response.go:166",
				"                                    spectest_test.go:1757",
				"                    Error:          Not equal: ",
				"                                    expected: 505",
				"                                    actual  : 200",
				"                    Test:           TestGoldenFile/Because_there_is_no_golden_file_in_the_specified_path,_a_golden_file_is_automatically_created.",
				"--- FAIL: Test_goldenFile_write (0.00s)",
				"    --- FAIL: Test_goldenFile_write/should_write_data_to_the_golden_file (0.00s)",
				"        file_system_test.go:51: write() file does not exist",
			},
		},
		{
			name: "If testResultMsgs is not empty and has error with '=== NAME', return error message",
			args: args{
				testResultMsgs: []string{
					"?",
					"github.com/go-spectest/markdown/doc/alert",
					"[no test files]",
					"?",
					"github.com/go-spectest/markdown/doc/badge",
					"[no test files]",
					"?",
					"github.com/go-spectest/markdown/doc/generate",
					"[no test files]",
					"=== RUN   TestMarkdownAlerts",
					"=== PAUSE TestMarkdownAlerts",
					"=== RUN   TestBoldItalic/success_BoldItalic()",
					"=== PAUSE TestBoldItalic/success_BoldItalic()",
					"=== CONT  TestMarkdownTable",
					"=== RUN   TestMarkdownTable/success_Table()",
					"=== PAUSE TestMarkdownTable/success_Table()",
					"=== CONT  TestHorizontalRule",
					"=== RUN   TestHorizontalRule/success_HorizontalRule()",
					"=== PAUSE TestHorizontalRule/success_HorizontalRule()",
					"=== CONT  TestStrikethrough",
					"=== RUN   TestStrikethrough/success_Strikethrough()",
					"=== PAUSE TestStrikethrough/success_Strikethrough()",
					"=== CONT  TestMarkdownHeader",
					"=== RUN   TestMarkdownHeader/success_H1f()",
					"=== CONT  TestMarkdownError",
					"=== PAUSE TestMarkdownHeader/success_H1f()",
					"=== RUN   TestMarkdownHeader/success_H2f()",
					"=== CONT  TestMarkdownNumberList",
					"=== PAUSE TestMarkdownHeader/success_H2f()",
					"=== RUN   TestMarkdownHeader/success_H3f()",
					"=== PAUSE TestMarkdownHeader/success_H3f()",
					"=== CONT  TestMarkdownBlockquote",
					"=== RUN   TestMarkdownHeader/success_H4f()",
					"=== RUN   TestMarkdownBlockquote/success_Blockquote()",
					"=== PAUSE TestMarkdownBlockquote/success_Blockquote()",
					"=== PAUSE TestMarkdownHeader/success_H4f()",
					"=== CONT  TestLink",
					"=== RUN   TestMarkdownHeader/success_H5f()",
					"=== PAUSE TestMarkdownHeader/success_H5f()",
					"=== RUN   TestMarkdownHeader/success_H6f()",
					"=== PAUSE TestMarkdownHeader/success_H6f()",
					"=== RUN   TestLink/success_Link()",
					"=== PAUSE TestLink/success_Link()",
					"=== CONT  TestMarkdownLF",
					"=== RUN   TestMarkdownLF/success_Markdown.LF()",
					"=== CONT  TestMarkdownBuildError",
					"=== PAUSE TestMarkdownLF/success_Markdown.LF()",
					"=== CONT  TestBold",
					"=== RUN   TestBold/success_Bold()",
					"=== PAUSE TestBold/success_Bold()",
					"=== CONT  TestMarkdownBulletList",
					"=== RUN   TestMarkdownBulletList/success_BulletList()",
					"=== PAUSE TestMarkdownBulletList/success_BulletList()",
					"=== RUN   TestMarkdownError/Error()_return_nil",
					"=== PAUSE TestMarkdownError/Error()_return_nil",
					"=== RUN   TestMarkdownError/Error()_return_error",
					"=== PAUSE TestMarkdownError/Error()_return_error",
					"=== CONT  TestCode/success_Code()",
					"=== RUN   TestMarkdownNumberList/success_NumberList()",
					"=== CONT  TestMarkdownDetailsf/success_Detailsf()",
					"--- PASS: TestCode (0.00s)",
					"    --- PASS: TestCode/success_Code() (0.00s)",
					"=== PAUSE TestMarkdownNumberList/success_NumberList()",
					"=== RUN   TestItalic/success_Italic()",
					"=== PAUSE TestItalic/success_Italic()",
					"=== CONT  TestMarkdownAlerts/success_Cautionf()",
					"=== CONT  TestMarkdownAlerts/success_Importantf()",
					"=== RUN   TestMarkdownBuildError/Error()_return_nil",
					"--- PASS: TestMarkdownDetailsf (0.00s)",
					"    --- PASS: TestMarkdownDetailsf/success_Detailsf() (0.00s)",
					"=== CONT  TestMarkdownAlerts/success_Tipf()",
					"=== CONT  TestPlainText/success_PlainText()",
					"=== CONT  TestMarkdownAlerts/success_Notef()",
					"=== CONT  TestImage",
					"=== RUN   TestImage/success_Image()",
					"=== PAUSE TestImage/success_Image()",
					"=== CONT  TestGenerateIndex/create_index",
					"=== CONT  TestTableSetValidateColumns/failed_TableSet.ValidateColumns();_invalid_header",
					"=== CONT  TestBoldItalic/success_BoldItalic()",
					"=== CONT  TestMarkdownTable/success_Table()",
					"=== CONT  TestHorizontalRule/success_HorizontalRule()",
					"=== CONT  TestTableSetValidateColumns/success_TableSet.ValidateColumns()",
					"--- PASS: TestHorizontalRule (0.00s)",
					"    --- PASS: TestHorizontalRule/success_HorizontalRule() (0.00s)",
					"=== CONT  TestStrikethrough/success_Strikethrough()",
					"--- PASS: TestTableSetValidateColumns (0.00s)",
					"    --- PASS: TestTableSetValidateColumns/failed_TableSet.ValidateColumns();_invalid_header (0.00s)",
					"    --- PASS: TestTableSetValidateColumns/success_TableSet.ValidateColumns() (0.00s)",
					"--- PASS: TestStrikethrough (0.00s)",
					"    --- PASS: TestStrikethrough/success_Strikethrough() (0.00s)",
					"=== CONT  TestMarkdownHeader/success_H1f()",
					"=== RUN   TestMarkdown_RedBadgef/success_RedBadgef()",
					"=== PAUSE TestMarkdown_RedBadgef/success_RedBadgef()",
					"--- PASS: TestBoldItalic (0.00s)",
					"    --- PASS: TestBoldItalic/success_BoldItalic() (0.00s)",
					"=== CONT  TestMarkdownHeader/success_H3f()",
					"--- PASS: TestMarkdownTable (0.00s)",
					"    --- PASS: TestMarkdownTable/success_Table() (0.00s)",
					"=== NAME  TestPlainText/success_PlainText()",
					"    markdown_test.go:25: value is mismatch (-want +got):",
					"          []string{",
					"        -       \"Hllo\",",
					"        +       \"Hello\",",
					"          }",
					"=== CONT  TestMarkdownAlerts/success_Warningf()",
					"--- FAIL: TestPlainText (0.00s)",
					"    --- FAIL: TestPlainText/success_PlainText() (0.00s)",
					"=== CONT  TestMarkdownHeader/success_H5f()",
					"=== CONT  TestMarkdownBuildError/Error()_return_nil",
					"# sample=== CONT  TestMarkdownBuildError/Error()_return_error",
					"=== CONT  TestMarkdown_RedBadgef/success_GreenBadgef()",
					"=== CONT  TestMarkdown_RedBadgef/success_RedBadgef()",
					"| NAME  | AGE |",
					"|-------|-----|",
					"| David |",
					"--- PASS: TestMarkdownBuildError (0.00s)",
					"    --- PASS: TestMarkdownBuildError/Error()_return_nil (0.00s)",
					"    --- PASS: TestMarkdownBuildError/Error()_return_error (0.00s)",
					"--- PASS: TestMarkdown_RedBadgef (0.00s)",
					"    --- PASS: TestMarkdown_RedBadgef/success_YellowBadgef() (0.00s)",
					"    --- PASS: TestMarkdown_RedBadgef/success_GreenBadgef() (0.00s)",
					"    --- PASS: TestMarkdown_RedBadgef/success_RedBadgef() (0.00s)",
					"=== RUN   Example",
					"--- PASS: Example (0.00s)",
					"FAIL",
					"FAIL    github.com/go-spectest/markdown 0.006s",
					"FAIL",
				},
			},
			want: []string{
				"--- FAIL: TestPlainText (0.00s)",
				"    --- FAIL: TestPlainText/success_PlainText() (0.00s)",
				"        markdown_test.go:25: value is mismatch (-want +got):",
				"              []string{",
				`            -       "Hllo",`,
				`            +       "Hello",`,
				"              }",
			},
		},
	}

	// TODO: read testdata from file
	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := extractFailTestMessage(tt.args.testResultMsgs)
			if diff := cmp.Diff(got, tt.want); diff != "" {
				t.Errorf("extractFailTestMessage() mismatch (-want +got):\n%s", diff)
			}
		})
	}
}

func Test_main(t *testing.T) {
	t.Run("test for version package", func(t *testing.T) {
		os.Args = []string{"hottest", "./version/..."}

		wantStatus := 0
		gotStatus := 0
		osExit = func(code int) {
			gotStatus = code
		}
		defer func() {
			osExit = os.Exit
		}()

		main()
		if gotStatus != wantStatus {
			t.Errorf("os.Exit(%d) is called", gotStatus)
		}
	})

	t.Run("execute hottest without arguments", func(t *testing.T) {
		os.Args = []string{"hottest"}

		wantStatus := 0
		gotStatus := 0
		osExit = func(code int) {
			gotStatus = code
		}
		defer func() {
			osExit = os.Exit
		}()

		main()
		if gotStatus != wantStatus {
			t.Errorf("os.Exit(%d) is called", gotStatus)
		}
	})

	t.Run("execute hottest with invalid arguments", func(t *testing.T) {
		os.Args = []string{"hottest", "invalid"}

		wantStatus := 0
		gotStatus := 0
		osExit = func(code int) {
			gotStatus = code
		}
		defer func() {
			osExit = os.Exit
		}()

		main()
		if gotStatus != wantStatus {
			t.Errorf("os.Exit(%d) is called", gotStatus)
		}
	})

	t.Run("go command is not installed", func(t *testing.T) {
		os.Args = []string{"hottest", "./..."}
		t.Setenv("GOPATH", "invalid")
		t.Setenv("PATH", "invalid")

		wantStatus := 0
		gotStatus := 1
		osExit = func(code int) {
			gotStatus = code
		}
		defer func() {
			osExit = os.Exit
		}()

		main()
		if gotStatus != wantStatus {
			t.Errorf("os.Exit(%d) is called", gotStatus)
		}
	})
}

func Test_isGitHubActions(t *testing.T) {
	t.Run("return true if GITHUB_ACTIONS is set", func(t *testing.T) {
		t.Setenv("GITHUB_ACTIONS", "true")

		if !isGitHubActions() {
			t.Errorf("want true, got false")
		}
	})

	t.Run("return false if GITHUB_ACTIONS is not set", func(t *testing.T) {
		t.Setenv("GITHUB_ACTIONS", "true")

		if isGitHubActions() {
			t.Errorf("want false, got true")
		}
	})
}
